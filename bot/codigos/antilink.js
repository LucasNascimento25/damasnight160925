// Fun√ß√£o para obter o link de convite do grupo
const getGroupInviteLink = async (sock, groupId) => {
    try {
        const inviteCode = await sock.groupInviteCode(groupId);
        return `https://chat.whatsapp.com/${inviteCode}`;
    } catch (error) {
        console.error('Erro ao obter o link de convite do grupo:', error);
        return null;
    }
};

// Fun√ß√£o para tentar deletar mensagem o mais r√°pido poss√≠vel
const deleteMessageWithRetries = async (sock, groupId, messageKey, maxRetries = 3) => {
    let retryCount = 0;

    while (retryCount < maxRetries) {
        try {
            // Tentativa imediata de exclus√£o
            await sock.sendMessage(groupId, { delete: messageKey });
            console.log(`Mensagem DELETADA (tentativa ${retryCount + 1})`);
            return true;
        } catch (error) {
            retryCount++;
            console.error(`Erro na tentativa ${retryCount} de deletar mensagem:`, error);

            if (retryCount < maxRetries) {
                // Delay m√≠nimo (50ms)
                await new Promise(resolve => setTimeout(resolve, 50));
            }
        }
    }

    console.error(`Falha ao deletar mensagem ap√≥s ${maxRetries} tentativas`);
    return false;
};

// Fun√ß√£o para notificar administradores e infrator (sem mostrar link)
const notifyAdminsAndOffender = async (sock, groupId, offenderId, detectedLink, deletionSuccess = true) => {
    try {
        const groupMetadata = await sock.groupMetadata(groupId);

        // Filtra os administradores
        const admins = groupMetadata.participants.filter(
            participant => participant.admin === 'admin' || participant.admin === 'superadmin'
        );

        // Cria lista de men√ß√µes: usu√°rio infrator + administradores
        const mentions = [offenderId, ...admins.map(admin => admin.id)];

        // Mensagem adaptada baseada no sucesso da exclus√£o
        let statusMessage = '';
        if (deletionSuccess) {
            statusMessage = '‚úÖ *Mensagem removida automaticamente*';
        } else {
            statusMessage = '‚ö†Ô∏è *Falha na remo√ß√£o autom√°tica - A√ß√£o manual necess√°ria*';
        }

        // Mensagem sem mostrar link do usu√°rio
        const message = `üö®üîó *·¥ç·¥á…¥Íú±·¥Ä…¢·¥á·¥ç Íú±·¥úÍú±·¥ò·¥á…™·¥õ·¥Ä ·¥Ö·¥á·¥õ·¥á·¥Ñ·¥õ·¥Ä·¥Ö·¥Ä!* \n  
${statusMessage}

*ùöÑùöúùöûùöäùöõùöíùöò:* @${offenderId.split('@')[0]} \n 
*ùôºùöòùöùùöíùöüùöò:* üö®‚ö†Ô∏è Esta mensagem cont√©m um link que n√£o √© permitido no grupo üëèüçª *DÔæëMÔæëS* üíÉüî• *DÔæë NIG”á‘µ* üíÉüé∂üçæüç∏ \n  
*üö®üîä ùô∞ùöçùöñùöíùöóùöíùöúùöùùöõùöäùöçùöòùöõùöéùöú:* ${admins.map(admin => `@${admin.id.split('@')[0]}`).join(', ')} \n  
*ùôøùôæùöÅ ùöÖùô∞ùôµùôæùöÅ, ùô∞ùöÖùô∞ùôªùô∏ùô¥ùôº ùô∞ ùöÇùô∏ùöÉùöÑùô∞ùô≤ùô∞ùôæ!*`;

        // Envia a mensagem para o grupo com men√ß√µes
        await sock.sendMessage(groupId, {
            text: message,
            mentions: mentions
        });

        console.log('Usu√°rio infrator e administradores foram mencionados (sem exibir link).');
    } catch (error) {
        console.error('Erro ao notificar administradores e usu√°rio:', error);
    }
};

// Fun√ß√£o para extrair texto da mensagem de forma mais robusta
const extractMessageText = (msg) => {
    if (!msg.message) return '';

    // Verifica diferentes tipos de mensagem
    if (msg.message.conversation) {
        return msg.message.conversation;
    }

    if (msg.message.extendedTextMessage) {
        return msg.message.extendedTextMessage.text || '';
    }

    if (msg.message.imageMessage && msg.message.imageMessage.caption) {
        return msg.message.imageMessage.caption;
    }

    if (msg.message.videoMessage && msg.message.videoMessage.caption) {
        return msg.message.videoMessage.caption;
    }

    if (msg.message.documentMessage && msg.message.documentMessage.caption) {
        return msg.message.documentMessage.caption;
    }

    return '';
};

// Fun√ß√£o para verificar se uma mensagem ainda existe no grupo
const checkMessageExists = async (sock, groupId, messageKey) => {
    try {
        const messages = await sock.fetchMessagesFromWA(groupId, 20);
        return messages.some(m => m.key.id === messageKey.id);
    } catch (error) {
        console.error('Erro ao verificar exist√™ncia da mensagem:', error);
        return true; // Assume que existe em caso de erro
    }
};

// Fun√ß√£o principal para tratar links n√£o permitidos
export const handleAntiLink = async (sock, msg, groupId) => {
    try {
        // Regex para detectar links
        const linkPattern = /(https?:\/\/[^\s]+|www\.[^\s]+|[^\s]+\.[a-z]{2,}\/[^\s]*|\b[a-zA-Z0-9-]+\.(?:com|org|net|edu|gov|mil|int|co|br|uk|de|fr|jp|cn|ru|in|au|ca|io|ly|me|app|tv|fm|live|online|site|tech|info|biz|name|mobi|pro|travel|museum|aero|coop|jobs|cat|xxx|tel|asia|post|geo|xxx)(?:\/[^\s]*)?)/gi;

        // Ignora mensagens do pr√≥prio bot
        if (msg.key.fromMe) {
            console.log('Mensagem ignorada: enviada pelo pr√≥prio bot');
            return;
        }

        // Verifica se o usu√°rio √© administrador
        const senderId = msg.key.participant || msg.key.remoteJid;
        const groupMetadata = await sock.groupMetadata(groupId);
        const senderParticipant = groupMetadata.participants.find(p => p.id === senderId);

        if (senderParticipant && (senderParticipant.admin === 'admin' || senderParticipant.admin === 'superadmin')) {
            console.log('Mensagem de administrador - links permitidos');
            return;
        }

        // Extrai o texto da mensagem
        const text = extractMessageText(msg);

        if (!text || text.trim() === '') {
            console.log('Nenhum texto encontrado na mensagem');
            return;
        }

        // Obt√©m link oficial do grupo
        const groupInviteLink = await getGroupInviteLink(sock, groupId);
        if (!groupInviteLink) {
            console.error('N√£o foi poss√≠vel obter o link de convite do grupo.');
            return;
        }

        const normalizedGroupInviteLink = groupInviteLink
            .replace(/^https?:\/\//, '')
            .toLowerCase()
            .trim();

        // Procura links na mensagem
        const links = text.match(linkPattern);

        if (links && links.length > 0) {
            let shouldDeleteMessage = false;
            let detectedLink = '';

            for (let link of links) {
                const cleanLink = link.trim();
                const normalizedLink = cleanLink
                    .replace(/^https?:\/\//, '')
                    .toLowerCase()
                    .trim();

                if (!normalizedLink.includes(normalizedGroupInviteLink) &&
                    normalizedLink !== normalizedGroupInviteLink) {
                    shouldDeleteMessage = true;
                    detectedLink = cleanLink;
                    break;
                }
            }

            if (shouldDeleteMessage) {
                const offenderId = msg.key.participant || msg.key.remoteJid;

                // Apaga imediatamente antes de tudo
                await sock.sendMessage(groupId, { delete: msg.key }).catch(() => {});

                // Tenta deletar a mensagem com m√∫ltiplas tentativas
                const deletionSuccess = await deleteMessageWithRetries(sock, groupId, msg.key);

                // Notifica admins com informa√ß√£o sobre o sucesso da exclus√£o (sem exibir o link)
                await notifyAdminsAndOffender(sock, groupId, offenderId, detectedLink, deletionSuccess);

                if (!deletionSuccess) {
                    console.log('Tentando m√©todo alternativo de exclus√£o...');
                    try {
                        setTimeout(async () => {
                            await sock.sendMessage(groupId, { delete: msg.key });
                            console.log('Tentativa de exclus√£o alternativa executada');
                        }, 1500);
                    } catch (altError) {
                        console.error('M√©todo alternativo tamb√©m falhou:', altError);
                    }
                }
            }
        }
    } catch (error) {
        console.error('Erro no handleAntiLink:', error);
    }
};

// Fun√ß√£o adicional para monitorar e tentar re-deletar mensagens que n√£o foram removidas
export const monitorAndCleanupLinks = async (sock, groupId, checkInterval = 30000) => {
    setInterval(async () => {
        try {
            console.log('Executando limpeza peri√≥dica de links...');
            // Aqui voc√™ pode implementar l√≥gica adicional para verificar mensagens recentes
            // e tentar deletar novamente aquelas que cont√©m links n√£o permitidos
        } catch (error) {
            console.error('Erro na limpeza peri√≥dica:', error);
        }
    }, checkInterval);
};
