// blacklistFunctions.js
import { query } from '../../database.js';

export const BOT_TITLE = 'üëèüçª *DÔæëMÔæëS* üíÉüî• *DÔæë* *NIG”á‘µ*üíÉüé∂üçæüç∏';

/**
 * Normaliza n√∫meros para o formato do WhatsApp
 * Ex: 5521998765432@s.whatsapp.net
 */
export function normalizeNumber(number) {
    let digits = number.replace(/@.*$/, '').replace(/\D/g, '');
    if (digits.length === 11 && !digits.startsWith('55')) digits = '55' + digits;

    // Formato que o Baileys reconhece
    return `${digits}@s.whatsapp.net`;
}

export function adminOnlyMessage() {
    return `${BOT_TITLE} üö´ Este comando s√≥ pode ser usado por administradores!`;
}

/**
 * Verifica em tempo real se o n√∫mero est√° na blacklist
 */
export async function isBlacklistedRealtime(number) {
    try {
        const normalizedId = normalizeNumber(number);
        const result = await query('SELECT whatsapp_id FROM blacklist WHERE whatsapp_id = $1', [normalizedId]);
        return result.rowCount > 0;
    } catch (err) {
        console.error(`${BOT_TITLE} ‚ùå Erro ao verificar blacklist:`, err);
        return false;
    }
}

/**
 * Adiciona n√∫mero √† blacklist
 */
export async function addToBlacklist(whatsappId, motivo = null) {
    try {
        const normalizedId = normalizeNumber(whatsappId);
        const alreadyBlocked = await isBlacklistedRealtime(normalizedId);
        if (alreadyBlocked) return `${BOT_TITLE} ‚ö†Ô∏è N√öMERO ${normalizedId} j√° est√° na blacklist.`;

        await query('INSERT INTO blacklist (whatsapp_id, motivo) VALUES ($1, $2)', [normalizedId, motivo]);
        return `${BOT_TITLE} ‚úÖ N√öMERO ${normalizedId} adicionado √† blacklist.`;
    } catch (err) {
        console.error(`${BOT_TITLE} ‚ùå Erro ao adicionar ${whatsappId}:`, err);
        return `${BOT_TITLE} ‚ùå Erro ao adicionar ${whatsappId} √† blacklist.`;
    }
}

/**
 * Remove n√∫mero da blacklist
 */
export async function removeFromBlacklist(whatsappId) {
    try {
        const normalizedId = normalizeNumber(whatsappId);
        const result = await query('DELETE FROM blacklist WHERE whatsapp_id = $1', [normalizedId]);

        if (result.rowCount > 0) return `${BOT_TITLE} üü¢ N√öMERO ${normalizedId} removido da blacklist üîì`;
        return `${BOT_TITLE} ‚ö†Ô∏è N√öMERO ${normalizedId} n√£o est√° na blacklist.`;
    } catch (err) {
        console.error(`${BOT_TITLE} ‚ùå Erro ao remover ${whatsappId}:`, err);
        return `${BOT_TITLE} ‚ùå Erro ao remover ${whatsappId} da blacklist.`;
    }
}

/**
 * Lista n√∫meros da blacklist
 */
export async function listBlacklist() {
    try {
        const result = await query('SELECT * FROM blacklist ORDER BY created_at DESC');
        if (!result.rows.length) return `${BOT_TITLE} üìã A blacklist est√° vazia.`;
        return `${BOT_TITLE}\n\n` + result.rows.map(r => `‚Ä¢ ${r.whatsapp_id} - ${r.motivo || 'Sem motivo'}`).join('\n');
    } catch (err) {
        console.error(`${BOT_TITLE} ‚ùå Erro ao listar blacklist:`, err);
        return `${BOT_TITLE} ‚ùå Erro ao listar blacklist.`;
    }
}

/**
 * Mensagem de ajuda da blacklist
 */
export function getBlacklistHelp() {
    return `
${BOT_TITLE} \n\n
üìã *COMANDOS DE BLACKLIST* üìã

‚Ä¢ #addlista [n√∫mero] - Adiciona n√∫mero √† blacklist
‚Ä¢ #remlista [n√∫mero] - Remove n√∫mero da blacklist
‚Ä¢ #verilista [n√∫mero] - Verifica se n√∫mero est√° na blacklist
‚Ä¢ #lista - Lista todos os n√∫meros da blacklist
‚Ä¢ #infolista - Mostra este guia

üí° *Como salvar n√∫meros corretamente:*
- Apenas d√≠gitos, sem s√≠mbolos.
- Inclua o c√≥digo do pa√≠s (55 para Brasil). Ex: 5521979452941
- N√∫meros internacionais: inclua o c√≥digo do pa√≠s + n√∫mero. Ex: 12125551234
`;
}

/**
 * Remove automaticamente usu√°rio blacklist ao entrar no grupo
 */
export async function onUserJoined(userId, groupId, bot) {
    try {
        const normalizedId = normalizeNumber(userId);
        const blocked = await isBlacklistedRealtime(normalizedId);

        if (blocked) {
            await bot.groupParticipantsUpdate(groupId, [normalizedId], 'remove');
            console.log(`${BOT_TITLE} üö® ${normalizedId} foi removido do grupo ${groupId} pois est√° na blacklist.`);
        } else {
            console.log(`${BOT_TITLE} ‚úÖ ${normalizedId} entrou no grupo ${groupId} e n√£o est√° na blacklist.`);
        }
    } catch (err) {
        console.error(`${BOT_TITLE} ‚ùå Erro ao processar entrada de ${userId} no grupo ${groupId}:`, err);
    }
}
